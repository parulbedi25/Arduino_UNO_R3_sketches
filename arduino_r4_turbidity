#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET    -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Sensor and buzzer
const int sensorPin = A0;
const int buzzerPin = 5;

// Shift Register for LED bar (LEDs 1â€“8)
const int dataPin = 9;    // DS
const int latchPin = 10;  // ST_CP
const int clockPin = 11;  // SH_CP

// Directly connected LEDs (LEDs 9 & 10)
const int led9Pin = 6;
const int led10Pin = 7;

// Buzzer timer
unsigned long buzzerOnTime = 0;
bool buzzerActive = false;

void setup() {
  Serial.begin(9600);

  pinMode(sensorPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(led9Pin, OUTPUT);
  pinMode(led10Pin, OUTPUT);

  digitalWrite(buzzerPin, LOW);

  // Initialize OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED not detected!");
    while (true);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 10);
  display.println("Turbidity Monitor");
  display.display();
  delay(1500);
}

void loop() {
  int sensorValue = analogRead(sensorPin);
  int turbidity = map(sensorValue, 0, 1000, 100, 0);
  turbidity = constrain(turbidity, 0, 100);

  Serial.print("Sensor: ");
  Serial.print(sensorValue);
  Serial.print(" | Turbidity: ");
  Serial.print(turbidity);
  Serial.println("%");

  // OLED Display
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Turbidity: ");
  display.print(turbidity);
  display.print("%");

  display.setCursor(0, 10);
  display.print("Value: ");
  display.print(sensorValue);

  display.setCursor(0, 22);
  if (sensorValue <= 300) {
    display.print("Status: DIRTY");

    // Turn on buzzer for 200ms (non-blocking)
    if (!buzzerActive) {
      digitalWrite(buzzerPin, HIGH);
      buzzerOnTime = millis();
      buzzerActive = true;
    }

  } else if (sensorValue <= 550) {
    display.print("Status: CLOUDY");
    digitalWrite(buzzerPin, LOW);
    buzzerActive = false;

  } else {
    display.print("Status: CLEAR");
    digitalWrite(buzzerPin, LOW);
    buzzerActive = false;
  }

  display.display();

  // Turn off buzzer after 200ms if active
  if (buzzerActive && millis() - buzzerOnTime >= 500) {
    digitalWrite(buzzerPin, LOW);
    buzzerActive = false;
  }
  setLEDLevel(turbidity);
  delay(50);
}

void setLEDLevel(int turbidityPercent) {
  static int lastLevel = -1;

  int level = map(turbidityPercent, 0, 100, 0, 10);
  level = constrain(level, 0, 10);

  if (level != lastLevel) {
    byte pattern = 0x00;
    if (level > 0) {
      pattern = (1 << min(level, 8)) - 1;
    }

    updateLEDBar(pattern);
    digitalWrite(led9Pin, level >= 9 ? HIGH : LOW);
    digitalWrite(led10Pin, level == 10 ? HIGH : LOW);

    lastLevel = level;
  }
}

void updateLEDBar(byte pattern) {
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, pattern);
  digitalWrite(latchPin, HIGH);
}
